name: build release

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    name: build ${{ matrix.target }}
    strategy:
      # fail-fast: true
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            arch: x86_64
            platform: linux
            archiveformat: tgz
          # - os: ubuntu-24.04-arm
          #   target: aarch64-unknown-linux-gnu
          #   arch: arm64
          #   platform: linux
          #   archiveformat: tgz
          - os: ubuntu-latest
            target: x86_64-pc-windows-gnu
            arch: x86_64
            platform: windows-gnu
            archiveformat: zip
          # - os: macos-latest
          #   target: x86_64-apple-darwin
          #   arch: x86_64
          #   platform: darwin
          #   archiveformat: tgz
          # - os: macos-latest
          #   target: aarch64-apple-darwin
          #   arch: arm64
          #   platform: darwin
          #   archiveformat: tgz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            arch: x86_64
            platform: windows-msvc
            archiveformat: zip
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true

      - name: Get Version
        id: get_version
        uses: baileyherbert/version-action@v3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: add Cargo to path
        run: |
          echo "$HOME/.cargo/bin" >> "$GITHUB_PATH"

      - name: Install system dependencies (ubuntu)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev libc6-dev mingw-w64 gcc-multilib g++-mingw-w64 gcc-mingw-w64 tar gzip

      - name: update version in toml files
        run: |
          cargo install --locked cargo-edit
          cargo install --locked sd
          cargo set-version --workspace ${{ steps.get_version.outputs.version-without-v }}
          sd '^version = "[^"]*"' 'version = "${{ steps.get_version.outputs.version-without-v }}"' extension.toml

      - name: cargo test
        if: |
          (startsWith(matrix.platform, 'linux') && startsWith(matrix.os, 'ubuntu')) ||
          (startsWith(matrix.platform, 'windows') && startsWith(matrix.os, 'windows')) ||
          (startsWith(matrix.platform, 'darwin') && startsWith(matrix.os, 'macos'))
        run: cargo test --release --workspace --target ${{ matrix.target }}

      - name: cargo build
        run: cargo build --release --workspace --target ${{ matrix.target }}

      - name: Compress Binary
        if: (!startsWith(matrix.platform , 'windows'))
        uses: somaz94/compress-decompress@v1
        with:
          command: compress
          source: ./target/${{ matrix.target }}/release/kagi-mcp-server
          format: ${{ matrix.archiveformat }}
          dest: "./dist/"
          destfilename: "kagi-mcp-server_${{ matrix.platform }}_${{ matrix.arch }}.${{ matrix.archiveformat }}"

      - name: Compress Binary
        if: (startsWith(matrix.platform , 'windows'))
        run: |
          Compress-Archive \
            -Path ./target/${{ matrix.target }}/release/kagi-mcp-server \
            -Destination "./dist/kagi-mcp-server_${{ matrix.platform }}_${{ matrix.arch }}.${{ matrix.archiveformat }}"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kagi-mcp-server_${{ matrix.platform }}_${{ matrix.arch }}.${{ matrix.archiveformat }}
          path: dist/
          retention-days: 1

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/
          merge-multiple: true

      - name: Release
        uses: softprops/action-gh-release@v2
        if: github.ref_type == 'tag'
        with:
          files: |
            dist/kagi-mcp-server*
            LICENSE

  # zed-extension:
  #   name: Release Zed Extension
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: huacnlee/zed-extension-action@v1
  #       with:
  #         extension-name: kagimcp-zed
  #         push-to: jmylchreest/zed-extensions
  #       env:
  #         COMMITTER_TOKEN: ${{ secrets.COMMITTER_TOKEN }}
