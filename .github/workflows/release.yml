name: Release

on:
  push:
    tags:
      - "v*"

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Get version
        id: get_version
        run: echo "version=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT

      - name: Create Release
        id: release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false

  build:
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            binary-suffix: ""
            archive-name: kagi-mcp-server_linux_x64.tar.gz
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            binary-suffix: ""
            archive-name: kagi-mcp-server_linux_arm64.tar.gz
            cross: true
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            binary-suffix: ".exe"
            archive-name: kagi-mcp-server_windows_x64.zip
          - target: x86_64-apple-darwin
            os: macos-13
            binary-suffix: ""
            archive-name: kagi-mcp-server_darwin_x64.tar.gz
          - target: aarch64-apple-darwin
            os: macos-14
            binary-suffix: ""
            archive-name: kagi-mcp-server_darwin_arm64.tar.gz

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross (Linux aarch64)
        if: matrix.cross
        run: |
          cargo install cross --git https://github.com/cross-rs/cross
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Set version
        run: |
          version="${GITHUB_REF/refs\/tags\//}"
          version_without_v="${version#v}"
          cargo install cargo-edit
          cargo set-version --workspace "$version_without_v"

      - name: Build
        run: |
          if [ "${{ matrix.cross }}" = "true" ]; then
            cross build --release --target ${{ matrix.target }} --package kagi-mcp-server
          else
            cargo build --release --target ${{ matrix.target }} --package kagi-mcp-server
          fi
        shell: bash

      - name: Create archive (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p release
          cp target/${{ matrix.target }}/release/kagi-mcp-server${{ matrix.binary-suffix }} release/
          cp README.md LICENSE release/
          cd release
          tar czf ${{ matrix.archive-name }} *

      - name: Create archive (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          New-Item -ItemType Directory -Path release
          Copy-Item target/${{ matrix.target }}/release/kagi-mcp-server${{ matrix.binary-suffix }} release/
          Copy-Item README.md, LICENSE release/
          cd release
          Compress-Archive -Path * -DestinationPath ${{ matrix.archive-name }}

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${GITHUB_REF/refs\/tags\//}
          files: release/${{ matrix.archive-name }}

  # zed-extension:
  #   name: Release Zed Extension
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - uses: huacnlee/zed-extension-action@v1
  #       with:
  #         extension-name: kagimcp-zed
  #         push-to: jmylchreest/zed-extensions
  #       env:
  #         COMMITTER_TOKEN: ${{ secrets.COMMITTER_TOKEN }}
