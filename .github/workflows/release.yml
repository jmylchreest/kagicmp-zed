name: Release

on:
  push:
    tags:
      - "v*"

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: 1

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Get version
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create Release
        id: release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true

  build:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            binary-suffix: ""
            archive-name: kagi-mcp-server_linux_x64.tar.gz
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            binary-suffix: ""
            archive-name: kagi-mcp-server_linux_arm64.tar.gz
            cross: true
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            binary-suffix: ".exe"
            archive-name: kagi-mcp-server_windows_x64.zip
          - target: x86_64-apple-darwin
            os: macos-latest
            binary-suffix: ""
            archive-name: kagi-mcp-server_darwin_x64.tar.gz
            use-cross-target: false
          - target: aarch64-apple-darwin
            os: macos-latest
            binary-suffix: ""
            archive-name: kagi-mcp-server_darwin_arm64.tar.gz
            use-cross-target: true

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross (Linux aarch64)
        if: matrix.cross
        run: |
          cargo install cross --git https://github.com/cross-rs/cross
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Set version (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          version="${{ needs.create-release.outputs.version }}"
          version_without_v="${version#v}"
          cargo install cargo-edit
          cargo set-version --workspace "$version_without_v"

      - name: Set version (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $version = "${{ needs.create-release.outputs.version }}"
          $version_without_v = $version -replace '^v', ''
          cargo install cargo-edit
          cargo set-version --workspace $version_without_v

      - name: Configure Rust for Apple targets
        if: matrix.os == 'macos-latest'
        run: |
          rustup target add aarch64-apple-darwin
          rustup target add x86_64-apple-darwin

      - name: Build (Cross Linux)
        if: matrix.cross
        run: cross build --release --target ${{ matrix.target }} --package kagi-mcp-server

      - name: Build (macOS cross-target)
        if: matrix.use-cross-target && matrix.os == 'macos-latest'
        run: |
          cargo build --release --target ${{ matrix.target }} --package kagi-mcp-server
        env:
          MACOSX_DEPLOYMENT_TARGET: "11.0"

      - name: Build (Native)
        if: "!matrix.cross && !matrix.use-cross-target"
        run: cargo build --release --target ${{ matrix.target }} --package kagi-mcp-server

      - name: Create archive (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p release
          cp target/${{ matrix.target }}/release/kagi-mcp-server${{ matrix.binary-suffix }} release/
          cp README.md LICENSE release/ || true
          cd release
          tar czf "../${{ matrix.archive-name }}" *
          cd ..
          ls -la

      - name: Create archive (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          New-Item -ItemType Directory -Path release -Force
          Copy-Item target\${{ matrix.target }}\release\kagi-mcp-server${{ matrix.binary-suffix }} release\
          Copy-Item README.md release\ -ErrorAction SilentlyContinue
          Copy-Item LICENSE release\ -ErrorAction SilentlyContinue
          Compress-Archive -Path release\* -DestinationPath ${{ matrix.archive-name }}
          Get-ChildItem

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          files: ${{ matrix.archive-name }}
          fail_on_unmatched_files: false

  # zed-extension:
  #   name: Release Zed Extension
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - uses: huacnlee/zed-extension-action@v1
  #       with:
  #         extension-name: kagimcp-zed
  #         push-to: jmylchreest/zed-extensions
  #       env:
  #         COMMITTER_TOKEN: ${{ secrets.COMMITTER_TOKEN }}
